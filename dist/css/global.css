/* @import "tailwindcss/base"; */

/* Modern reset: https://piccalil.li/blog/a-modern-css-reset/ */

/* Box sizing rules */

*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Remove default margin */

body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */

ul[role="list"],
ol[role="list"] {
  list-style: none;
}

/* Prevent zooming when orientation changes on some iOS devices */

html {
  text-size-adjust: none;
  -webkit-text-size-adjust: none;
}

/* Set core root defaults */

html:focus-within {
  scroll-behavior: smooth;
}

/* Set core body defaults */

body {
  min-height: 100vh;
  text-rendering: optimizeSpeed;
  line-height: 1.5;
}

/* A elements that don't have a class get default styles */

a:not([class]) {
  text-decoration-skip-ink: auto;
}

/* Make images easier to work with */

img,
picture {
  max-width: 100%;
  display: block;
}

/* Inherit fonts for inputs and buttons */

input,
button,
textarea,
select {
  font: inherit;
}

.form-field {
  --form-field-width: 40ch;

  /* //reset the defaults */
  background-color: #fff;
  border: 2px solid;
  border-radius: var(--border-radius);
  padding: var(--space-s) var(--space-m);
  font-family: inherit;
  color: inherit;
  /* //fallback for safari zoom */
  font-size: 16px;
  /* // Caps this to prevent sass thinking it's the sass max() function */
  font-size: Max(16px, 1em);
  max-width: 100%;
  /* width: var(--form-field-width, 30ch); */
  width: min(100%, var(--form-field-width));
}

.form-button {
  border: none;
  background-color: transparent;
  font-family: inherit;
  padding: 0;
  cursor: pointer;
}

fieldset {
  border: none;
  padding: 0;
  margin: 0;
}

legend {
  padding: 0;
}

:root {
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  --color-dark: #242522;
  --color-light: #F3F3F3;
  --color-light-glare: #FFFFFF;
  --color-primary: #B7B9B1;
  --color-primary-glare: #c7c7c0;
  --color-secondary: #aafa50;
  --color-secondary-glare: #CAFC92;
  --space-xs: clamp(0.75rem, 0.69rem + 0.29vw, 0.9375rem);
  --space-s: clamp(1rem, 0.92rem + 0.39vw, 1.25rem);
  --space-m: clamp(1.5rem, 1.38rem + 0.58vw, 1.875rem);
  --space-l: clamp(2rem, 1.84rem + 0.78vw, 2.5rem);
  --space-xl: clamp(3rem, 2.77rem + 1.17vw, 3.75rem);
  --space-2xl: clamp(4rem, 3.69rem + 1.55vw, 5rem);
  --space-3xl: clamp(6rem, 5.53rem + 2.33vw, 7.5rem);
  --space-xs-s: clamp(0.75rem, 0.59rem + 0.78vw, 1.25rem);
  --space-s-m: clamp(1rem, 0.73rem + 1.36vw, 1.875rem);
  --space-m-l: clamp(1.5rem, 1.19rem + 1.55vw, 2.5rem);
  --space-l-xl: clamp(2rem, 1.46rem + 2.72vw, 3.75rem);
  --space-l-2xl: clamp(2rem, 1.07rem + 4.66vw, 5rem);
  --space-xl-2xl: clamp(3rem, 2.38rem + 3.11vw, 5rem);
  --space-2xl-3xl: clamp(4rem, 2.91rem + 5.44vw, 7.5rem);
  --size-step-0: clamp(1rem, 0.92rem + 0.39vw, 1.25rem);
  --size-step-1: clamp(1.1875rem, 1.01rem + 0.87vw, 1.75rem);
  --size-step-2: clamp(1.4375rem, 1.11rem + 1.65vw, 2.5rem);
  --size-step-3: clamp(1.75rem, 1.19rem + 2.82vw, 3.5625rem);
  --size-step-4: clamp(2.0625rem, 1.15rem + 4.56vw, 5rem);
  --size-step-5: clamp(2.5rem, 1.08rem + 7.09vw, 7.0625rem);
  --size-step-6: clamp(3rem, 0.84rem + 10.78vw, 9.9375rem);
  --gutter: var(--space-s-m);
  --border-radius: var(--size-step-1);
  --transition-base: 250ms ease;
  --transition-movement: 200ms linear;
  --transition-fade: 200ms ease;
  --transition-bounce: 500ms cubic-bezier(0.5, 0.05, 0.2, 1.5);
  --tracking: -0.05ch;
  --tracking-s: -0.075ch;
}

/*
  Global styles

  Low-specificity, global styles that apply to the whole
  project: https://cube.fyi/css.html
*/

body {
  color: var(--color-dark);
  background: var(--color-light);
  font-size: var(--size-step-1);
  font-family: var(--font-base);
  line-height: 1.4;
  letter-spacing: var(--tracking);
}

/* Base typesetting */

h1,
h2,
h3 {
  line-height: 1;
  letter-spacing: var(--tracking-s);
}

h1 {
  font-size: var(--size-step-5);
}

h2 {
  font-size: var(--size-step-4);
}

h3 {
  font-size: var(--size-step-3);
}

/* Set line lengths */

p,
li,
blockquote:not([class]) {
  max-width: 50ch;
}

h1,
h2,
h3 {
  max-width: 20ch;
}

/* More generic elements */

blockquote:not([class]) {
  font-family: var(--font-serif);
  font-size: var(--size-step-2);
}

/* Markdown blockquuote:not([class])s aren't ideal, so we're presuming the person quoted is the last p */

blockquote:not([class]) p:last-of-type {
  font-family: var(--font-base);
  font-size: var(--size-step-1);
  font-weight: normal;
}

svg {
  height: 2ex;
  width: auto;
  flex: none;
}

[role="list"] {
  padding: 0;
}

/* Base interactive elements */

a {
  color: currentcolor;
}

a:hover {
  text-decoration: none;
}

:focus {
  outline: 2px solid;
  outline-offset: 0.3ch;
}

:target {
  scroll-margin-top: 2ex;
}

main:focus {
  outline: none;
}

/* Base selection styles that invert whatever colours are rendered */

::selection {
  background: var(--color-dark);
  color: var(--color-light);
}

form {
  color: var(--color-light)
}

.form.wrapper {
  --wrapper-max-width: 70rem;
}

.form-group {
  margin-top: var(--space-m);
}

.form-group label {
  display: block;
  font-weight: 300;
  line-height: 1.1;
  margin-left: var(--space-xs);
}

.form-group .form-field {
  margin-top: var(--space-xs);
}

.field-description {
  display: block;
  margin-top: var(--space-xs);
  margin-left: var(--space-xs);
  opacity: .8;
  font-size: var(--size-step-0);
}

.form-field {
  color: var(--color-dark);
}

.form-field:focus {
  border-color: var(--color-secondary);
  box-shadow: 0 0 .6em -0.1em var(--color-secondary);
  outline: 4px solid transparent;
}

.form-button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  color: var(--color-light-glare);
  border: 3px solid var(--color-secondary);
  padding: var(--space-s) var(--space-m-l);
  border-radius: var(--border-radius);
  transition: 220ms all ease-in-out;
}

.form-button:focus, .form-button:hover {
  outline: solid;
  outline-color: transparent;
  color: var(--color-secondary);
  box-shadow: 0 0 0 0.05em currentColor, 0 0 0.15em 0.15em var(--color-secondary-glare);
}

.prose {
  --flow-space: var(--space-l-xl);
  --wrapper-max-width: 55rem;
}

.prose :is(h2, h3, h4) + * {
  --flow-space: var(--space-s-m);
}

.prose blockquote {
  border-inline-start: 10px solid var(--color-secondary);
  padding: var(--space-m-l);
  font-family: var(--font-serif);
  font-style: italic;
  font-size: var(--size-step-2);
}

.prose blockquote > * + * {
  margin-top: var(--space-m-l);
}

.prose blockquote :last-child {
  font-family: var(--font-base);
  font-style: normal;
  font-size: var(--size-step-1);
}

.section {
  background-color: var(--spot-color);
  padding-block: var(--space-l-2xl)

}

.section > .curve {
  transform: translateY(-1px);
}

.section > .curve:first-child {
  transform: rotate(180deg) translateY(-1px);
}

.section__inner {
  background: var(--spot-color, var(--color-dark));
  color: var(--color-light);
}

.section blockquote {
  font-weight: 700;
  line-height: 1;
  font-size: var(--size-step-4);
  letter-spacing: var(--tracking-s);
}

.section :is(h1, h2, h3, blockquote) {
  opacity: 95%;
}

.features {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 33%, 20rem);
  --gutter: var(--space-l-xl);
  --flow-space: var(--space-s);

  text-align: center;
}

.features svg {
  display: block;
  /* margin-inline: auto; */
  height: 2em;
}

.features a {
  text-decoration: none;
}

.features a:hover {
  text-decoration: underline;
  text-decoration-thickness: 0.08ex;
  text-underline-offset: 0.2ex;
}

/* AUTO GRID
Related Every Layout: https://every-layout.dev/layouts/grid/
More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
A flexible layout that will create an auto-fill grid with
configurable grid item sizes

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--grid-min-item-size (14rem): How large each item should be
ideally, as a minimum.

--grid-placement (auto-fill): Set either auto-fit or auto-fill
to change how empty grid tracks are handled */

.grid {
  display: grid;
  grid-template-columns: repeat(
    var(--grid-placement, auto-fill),
    minmax(var(--grid-min-item-size, 16rem), 1fr)
  );
  gap: var(--gutter, var(--space-s-l));
}

.grid[data-rows='masonry'] {
  grid-template-rows: masonry;
  align-items: start;
}

.grid[data-layout='50-50'] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 50vw, 26rem);
}

.heading {
  --region-space: var(--space-s);
  background-color: var(--color-dark);
  color: var(--color-light-glare);
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding-inline: var(--gutter);
}

.heading svg {
  display: block;
  height: 3em;
}

.accent-me {
  text-decoration: underline;
  padding-inline: 0 5px;
  background: linear-gradient(to bottom, transparent 50%, var(--color-secondary) 20%);
}

.accent-me[data-width='thin'] {
  background: linear-gradient(to bottom, transparent 94%, var(--color-secondary) 20%);
}

.flow > * + * {
  margin-top: var(--flow-space, 1em);
}

.list-none {
  list-style-type: none;
}

/**
 * REGION
 * Add consistent vertical padding to create regions of content
 * Can either be configured by setting --region-space or use a default from the space scale
 */

.region {
  padding-top: var(--region-space, var(--space-l-2xl));
  padding-bottom: var(--region-space, var(--space-l-2xl));
}

/**
 * WRAPPER
 * Sets a max width, adds a consistent gutter and horizontally
 * centers the contents
 * Info: https://piccalil.li/quick-tip/use-css-clamp-to-create-a-more-flexible-wrapper-utility/
 */

.wrapper {
  max-width: var(--wrapper-max-width, 85rem);
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--gutter);
  padding-right: var(--gutter);
  position: relative;
}

.mt-\[0\] {
  margin-top: 0;
}

.mt-l-xl {
  margin-top: clamp(2rem, 1.46rem + 2.72vw, 3.75rem);
}

.mt-xl {
  margin-top: clamp(3rem, 2.77rem + 1.17vw, 3.75rem);
}

.block {
  display: block;
}

.inline {
  display: inline;
}

.grid {
  display: grid;
}

.items-center {
  align-items: center;
}

.self-center {
  align-self: center;
}

.p-s {
  padding: clamp(1rem, 0.92rem + 0.39vw, 1.25rem);
}

.pt-\[0\] {
  padding-top: 0;
}

.pr-m {
  padding-right: clamp(1.5rem, 1.38rem + 0.58vw, 1.875rem);
}

.pr-l {
  padding-right: clamp(2rem, 1.84rem + 0.78vw, 2.5rem);
}

.pr-xl {
  padding-right: clamp(3rem, 2.77rem + 1.17vw, 3.75rem);
}

.text-left {
  text-align: left;
}

.text-step-0 {
  font-size: clamp(1rem, 0.92rem + 0.39vw, 1.25rem);
}

.font-bold {
  font-weight: 700;
}

.text-primary-glare {
  --tw-text-opacity: 1;
  color: rgb(199 199 192 / var(--tw-text-opacity));
}

.text-secondary {
  --tw-text-opacity: 1;
  color: rgb(170 250 80 / var(--tw-text-opacity));
}

.flow-space-xs {
  --flow-space: clamp(0.75rem, 0.69rem + 0.29vw, 0.9375rem);
}

.flow-space-2xl {
  --flow-space: clamp(4rem, 3.69rem + 1.55vw, 5rem);
}

.flow-space-2xl-3xl {
  --flow-space: clamp(4rem, 2.91rem + 5.44vw, 7.5rem);
}

.spot-color-dark {
  --spot-color: #242522;
}

.spot-color-secondary-glare {
  --spot-color: #CAFC92;
}
